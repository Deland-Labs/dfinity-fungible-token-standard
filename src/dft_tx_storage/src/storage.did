type BlockListResult = variant { Ok : vec CandidBlock; Err : ErrorInfo };
type BlockResult = variant {
  Ok : CandidBlock;
  Err : ErrorInfo;
  Forward : principal;
};
type BooleanResult = variant { Ok : bool; Err : ErrorInfo };
type CandidBlock = record {
  transaction : CandidTransaction;
  timestamp : nat64;
  parentHash : opt vec nat8;
};
type CandidOperation = variant {
  FeeToModify : record { newFeeTo : TokenHolder; caller : principal };
  Approve : record {
    fee : nat;
    value : nat;
    owner : TokenHolder;
    caller : principal;
    spender : TokenHolder;
  };
  FeeModify : record { newFee : CandidTokenFee; caller : principal };
  Transfer : record {
    to : TokenHolder;
    fee : nat;
    value : nat;
    from : TokenHolder;
    caller : TokenHolder;
  };
  OwnerModify : record { newOwner : principal; caller : principal };
};
type CandidTokenFee = record {
  rate : nat32;
  minimum : nat;
  rateDecimals : nat8;
};
type CandidTransaction = record {
  createdAt : nat64;
  operation : CandidOperation;
};
type ErrorInfo = record { code : nat32; message : text };
type StorageInfo = record {
  tokenId : principal;
  totalBlocksCount : nat;
  cycles : nat64;
  totalBlockSizeBytes : nat;
  blockHeightOffset : nat;
};
type TokenHolder = variant { None; Account : text; Principal : principal };
service : (principal, nat) -> {
  batchAppend : (vec vec nat8) -> (BooleanResult);
  blockByHeight : (nat) -> (BlockResult) query;
  blocksByQuery : (nat, nat64) -> (BlockListResult) query;
  storageInfo : () -> (StorageInfo) query;
}